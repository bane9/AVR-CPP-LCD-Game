
T_Rex_C++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000009f0  00000a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080012c  0080012c  00000ab0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002193  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a41  00000000  00000000  00002ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5a  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00004378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008af  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000114f  00000000  00000000  00004f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000609e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  9e:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN6LCDDrv11FourBitComdEh>:
void LCDDrv::ShiftCursorLeft(){
	LCD.Command(LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVELEFT);
}

void LCDDrv::ShiftCursorRight(){
	LCD.Command(LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	66 23       	and	r22, r22
  ae:	0c f4       	brge	.+2      	; 0xb2 <_ZN6LCDDrv11FourBitComdEh+0xc>
  b0:	5f 9a       	sbi	0x0b, 7	; 11
  b2:	66 fd       	sbrc	r22, 6
  b4:	5e 9a       	sbi	0x0b, 6	; 11
  b6:	65 fd       	sbrc	r22, 5
  b8:	5d 9a       	sbi	0x0b, 5	; 11
  ba:	64 fd       	sbrc	r22, 4
  bc:	5c 9a       	sbi	0x0b, 4	; 11
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <_ZN6LCDDrv11FourBitComdEh+0x1c>
  c6:	00 00       	nop
  c8:	29 98       	cbi	0x05, 1	; 5
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <_ZN6LCDDrv11FourBitComdEh+0x26>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <_ZN6LCDDrv5WriteEh>:
  d4:	cf 93       	push	r28
  d6:	c6 2f       	mov	r28, r22
  d8:	28 9a       	sbi	0x05, 0	; 5
  da:	8c e2       	ldi	r24, 0x2C	; 44
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
  e2:	6c 2f       	mov	r22, r28
  e4:	62 95       	swap	r22
  e6:	60 7f       	andi	r22, 0xF0	; 240
  e8:	8c e2       	ldi	r24, 0x2C	; 44
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <_ZN6LCDDrv5WriteEh+0x20>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_ZN6LCDDrv5WriteEh+0x26>
  fa:	00 00       	nop
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <_ZN6LCDDrv7CommandEh>:
 100:	cf 93       	push	r28
 102:	c6 2f       	mov	r28, r22
 104:	28 98       	cbi	0x05, 0	; 5
 106:	8c e2       	ldi	r24, 0x2C	; 44
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
 10e:	6c 2f       	mov	r22, r28
 110:	62 95       	swap	r22
 112:	60 7f       	andi	r22, 0xF0	; 240
 114:	8c e2       	ldi	r24, 0x2C	; 44
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <_ZN6LCDDrv7CommandEh+0x20>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN6LCDDrv7CommandEh+0x26>
 126:	00 00       	nop
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_ZN6LCDDrv9SetCursorEhh>:
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	11 f0       	breq	.+4      	; 0x134 <_ZN6LCDDrv9SetCursorEhh+0x8>
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	01 c0       	rjmp	.+2      	; 0x136 <_ZN6LCDDrv9SetCursorEhh+0xa>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	68 0f       	add	r22, r24
 138:	60 68       	ori	r22, 0x80	; 128
 13a:	8c e2       	ldi	r24, 0x2C	; 44
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
 142:	08 95       	ret

00000144 <_ZN6LCDDrv5ClearEv>:
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	8c e2       	ldi	r24, 0x2C	; 44
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
 14e:	8f e1       	ldi	r24, 0x1F	; 31
 150:	9e e4       	ldi	r25, 0x4E	; 78
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <_ZN6LCDDrv5ClearEv+0xe>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN6LCDDrv5ClearEv+0x14>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <_ZN6LCDDrv12AddCharacterEhPh>:
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	68 30       	cpi	r22, 0x08	; 8
 166:	e8 f4       	brcc	.+58     	; 0x1a2 <_ZN6LCDDrv12AddCharacterEhPh+0x46>
 168:	c6 2f       	mov	r28, r22
 16a:	cc 0f       	add	r28, r28
 16c:	cc 0f       	add	r28, r28
 16e:	cc 0f       	add	r28, r28
 170:	c0 5c       	subi	r28, 0xC0	; 192
 172:	04 2f       	mov	r16, r20
 174:	15 2f       	mov	r17, r21
 176:	d8 e0       	ldi	r29, 0x08	; 8
 178:	dc 0f       	add	r29, r28
 17a:	6c 2f       	mov	r22, r28
 17c:	8c e2       	ldi	r24, 0x2C	; 44
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
 184:	f8 01       	movw	r30, r16
 186:	61 91       	ld	r22, Z+
 188:	8f 01       	movw	r16, r30
 18a:	8c e2       	ldi	r24, 0x2C	; 44
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN6LCDDrv5WriteEh>
 192:	cf 5f       	subi	r28, 0xFF	; 255
 194:	cd 13       	cpse	r28, r29
 196:	f1 cf       	rjmp	.-30     	; 0x17a <_ZN6LCDDrv12AddCharacterEhPh+0x1e>
 198:	60 e8       	ldi	r22, 0x80	; 128
 19a:	8c e2       	ldi	r24, 0x2C	; 44
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <_ZN6LCDDrv11RightToLeftEv>:
 1ac:	ec e2       	ldi	r30, 0x2C	; 44
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	62 81       	ldd	r22, Z+2	; 0x02
 1b2:	6d 7f       	andi	r22, 0xFD	; 253
 1b4:	62 83       	std	Z+2, r22	; 0x02
 1b6:	64 60       	ori	r22, 0x04	; 4
 1b8:	cf 01       	movw	r24, r30
 1ba:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
 1be:	08 95       	ret

000001c0 <_ZN6LCDDrv11LeftToRightEv>:
 1c0:	ec e2       	ldi	r30, 0x2C	; 44
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	62 81       	ldd	r22, Z+2	; 0x02
 1c6:	86 2f       	mov	r24, r22
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	82 83       	std	Z+2, r24	; 0x02
 1cc:	66 60       	ori	r22, 0x06	; 6
 1ce:	cf 01       	movw	r24, r30
 1d0:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
 1d4:	08 95       	ret

000001d6 <_ZN6LCDDrv11BacklightOnEv>:
}

void LCDDrv::BacklightOn(){
	PORTB |= 1 << DDB2;
 1d6:	2a 9a       	sbi	0x05, 2	; 5
 1d8:	08 95       	ret

000001da <_ZN6LCDDrv4InitEv>:
#include <util/delay.h>
#include "LCDDrv.h"

static LCDDrv LCD;

void LCDDrv::Init(){	
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	89 e6       	ldi	r24, 0x69	; 105
 1e2:	98 e1       	ldi	r25, 0x18	; 24
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <_ZN6LCDDrv4InitEv+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZN6LCDDrv4InitEv+0x14>
 1ee:	00 00       	nop
	_delay_ms(500);
	DDRD |= 0b11110000;
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	80 6f       	ori	r24, 0xF0	; 240
 1f4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b00000111;
 1f6:	84 b1       	in	r24, 0x04	; 4
 1f8:	87 60       	ori	r24, 0x07	; 7
 1fa:	84 b9       	out	0x04, r24	; 4
	LCD.BacklightOn();
 1fc:	8c e2       	ldi	r24, 0x2C	; 44
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN6LCDDrv11BacklightOnEv>
	LCD.FourBitComd(LCD_INIT8BIT);
 204:	60 e3       	ldi	r22, 0x30	; 48
 206:	8c e2       	ldi	r24, 0x2C	; 44
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <_ZN6LCDDrv4InitEv+0x38>
 216:	00 c0       	rjmp	.+0      	; 0x218 <_ZN6LCDDrv4InitEv+0x3e>
 218:	00 00       	nop
	_delay_ms(5);
	LCD.FourBitComd(LCD_INIT8BIT);
 21a:	60 e3       	ldi	r22, 0x30	; 48
 21c:	8c e2       	ldi	r24, 0x2C	; 44
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f e1       	ldi	r24, 0x1F	; 31
 226:	93 e0       	ldi	r25, 0x03	; 3
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <_ZN6LCDDrv4InitEv+0x4e>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_ZN6LCDDrv4InitEv+0x54>
 22e:	00 00       	nop
	_delay_us(200);
	LCD.FourBitComd(LCD_INIT8BIT);
 230:	60 e3       	ldi	r22, 0x30	; 48
 232:	8c e2       	ldi	r24, 0x2C	; 44
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
 23a:	8f e1       	ldi	r24, 0x1F	; 31
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <_ZN6LCDDrv4InitEv+0x64>
 242:	00 c0       	rjmp	.+0      	; 0x244 <_ZN6LCDDrv4InitEv+0x6a>
 244:	00 00       	nop
	_delay_us(200);
	LCD.funcControl = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS; 
 246:	cc e2       	ldi	r28, 0x2C	; 44
 248:	d1 e0       	ldi	r29, 0x01	; 1
 24a:	88 e2       	ldi	r24, 0x28	; 40
 24c:	89 83       	std	Y+1, r24	; 0x01
	LCD.FourBitComd(LCD.funcControl);
 24e:	68 e2       	ldi	r22, 0x28	; 40
 250:	ce 01       	movw	r24, r28
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6LCDDrv11FourBitComdEh>
 256:	8f e1       	ldi	r24, 0x1F	; 31
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <_ZN6LCDDrv4InitEv+0x80>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <_ZN6LCDDrv4InitEv+0x86>
 260:	00 00       	nop
	_delay_us(200);
	LCD.Command(LCD.funcControl);
 262:	69 81       	ldd	r22, Y+1	; 0x01
 264:	ce 01       	movw	r24, r28
 266:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
	LCD.Command(LCD_DISPLAYCONTROL | LCD_DISPLAYOFF);
 26a:	68 e0       	ldi	r22, 0x08	; 8
 26c:	ce 01       	movw	r24, r28
 26e:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
	LCD.Clear();
 272:	ce 01       	movw	r24, r28
 274:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN6LCDDrv5ClearEv>
	LCD.modeControl = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	8a 83       	std	Y+2, r24	; 0x02
	LCD.Command(LCD_ENTRYMODESET | LCD.modeControl);
 27c:	66 e0       	ldi	r22, 0x06	; 6
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
	LCD.dispControl = LCD_DISPLAYCONTROL | LCD_DISPLAYON;
 284:	8c e0       	ldi	r24, 0x0C	; 12
 286:	88 83       	st	Y, r24
	LCD.Command(LCD.dispControl);
 288:	6c e0       	ldi	r22, 0x0C	; 12
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 80 00 	call	0x100	; 0x100 <_ZN6LCDDrv7CommandEh>
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <_Z11printStringPcb>:
	buff[10] = '\0';
	if(rev) printString(buff, rev);
	else printString(buff);
}

void printString(char *chr, bool rev){
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	8c 01       	movw	r16, r24
	for(int8_t i = strlen(chr) - 1; i >= 0; i--)
 29e:	fc 01       	movw	r30, r24
 2a0:	01 90       	ld	r0, Z+
 2a2:	00 20       	and	r0, r0
 2a4:	e9 f7       	brne	.-6      	; 0x2a0 <_Z11printStringPcb+0xa>
 2a6:	e8 1b       	sub	r30, r24
 2a8:	ce ef       	ldi	r28, 0xFE	; 254
 2aa:	ce 0f       	add	r28, r30
 2ac:	72 f0       	brmi	.+28     	; 0x2ca <_Z11printStringPcb+0x34>
		if(chr[i] != 255)
 2ae:	f8 01       	movw	r30, r16
 2b0:	ec 0f       	add	r30, r28
 2b2:	f1 1d       	adc	r31, r1
 2b4:	c7 fd       	sbrc	r28, 7
 2b6:	fa 95       	dec	r31
 2b8:	60 81       	ld	r22, Z
 2ba:	6f 3f       	cpi	r22, 0xFF	; 255
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <_Z11printStringPcb+0x30>
			LCD.Write(chr[i]);
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN6LCDDrv5WriteEh>
 2c6:	c1 50       	subi	r28, 0x01	; 1
	if(rev) printString(buff, rev);
	else printString(buff);
}

void printString(char *chr, bool rev){
	for(int8_t i = strlen(chr) - 1; i >= 0; i--)
 2c8:	92 f7       	brpl	.-28     	; 0x2ae <_Z11printStringPcb+0x18>
		if(chr[i] != 255)
			LCD.Write(chr[i]);
		
}
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <_Z11printStringPc>:

void printString(char *chr){
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(chr); i++)
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	81 2f       	mov	r24, r17
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fe 01       	movw	r30, r28
 2e2:	01 90       	ld	r0, Z+
 2e4:	00 20       	and	r0, r0
 2e6:	e9 f7       	brne	.-6      	; 0x2e2 <_Z11printStringPc+0x10>
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	ec 1b       	sub	r30, r28
 2ec:	fd 0b       	sbc	r31, r29
 2ee:	8e 17       	cp	r24, r30
 2f0:	9f 07       	cpc	r25, r31
 2f2:	60 f4       	brcc	.+24     	; 0x30c <_Z11printStringPc+0x3a>
		if(chr[i] != 255)
 2f4:	fe 01       	movw	r30, r28
 2f6:	e8 0f       	add	r30, r24
 2f8:	f9 1f       	adc	r31, r25
 2fa:	60 81       	ld	r22, Z
 2fc:	6f 3f       	cpi	r22, 0xFF	; 255
 2fe:	21 f0       	breq	.+8      	; 0x308 <_Z11printStringPc+0x36>
			LCD.Write(chr[i]);
 300:	81 e3       	ldi	r24, 0x31	; 49
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN6LCDDrv5WriteEh>
			LCD.Write(chr[i]);
		
}

void printString(char *chr){
	for(uint8_t i = 0; i < strlen(chr); i++)
 308:	1f 5f       	subi	r17, 0xFF	; 255
 30a:	e8 cf       	rjmp	.-48     	; 0x2dc <_Z11printStringPc+0xa>
		if(chr[i] != 255)
			LCD.Write(chr[i]);
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	08 95       	ret

00000314 <_Z5aReadv>:
	printString("Score:", reverse);
	LCD.LeftToRight();
}

uint16_t aRead(){
	ADCSRA |= (1 << ADSC);
 314:	ea e7       	ldi	r30, 0x7A	; 122
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	80 83       	st	Z, r24
	while  (ADCSRA & (1 << ADSC));
 31e:	80 81       	ld	r24, Z
 320:	86 fd       	sbrc	r24, 6
 322:	fd cf       	rjmp	.-6      	; 0x31e <_Z5aReadv+0xa>
	return ADCL | (ADCH << 8);
 324:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 328:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 32c:	90 e0       	ldi	r25, 0x00	; 0
}
 32e:	92 2b       	or	r25, r18
 330:	08 95       	ret

00000332 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
		uint16_t aVal = aRead();
 354:	0e 94 8a 01 	call	0x314	; 0x314 <_Z5aReadv>
		if(aVal > 95 && aVal < 104 && canUp && !longhold){
 358:	80 56       	subi	r24, 0x60	; 96
 35a:	91 09       	sbc	r25, r1
 35c:	08 97       	sbiw	r24, 0x08	; 8
 35e:	78 f4       	brcc	.+30     	; 0x37e <__vector_14+0x4c>
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <canUp>
 364:	88 23       	and	r24, r24
 366:	59 f0       	breq	.+22     	; 0x37e <__vector_14+0x4c>
 368:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <longhold>
 36c:	81 11       	cpse	r24, r1
 36e:	07 c0       	rjmp	.+14     	; 0x37e <__vector_14+0x4c>
			goUp = true;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <goUp>
			canUp = false;
 376:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <canUp>
			longhold = true;
 37a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <longhold>
		}
}
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <_Z8printNumIjEvT_b>:
		
	}
}

template <class T>
void printNum(T num, bool rev){
 3a0:	3f 92       	push	r3
 3a2:	4f 92       	push	r4
 3a4:	5f 92       	push	r5
 3a6:	6f 92       	push	r6
 3a8:	7f 92       	push	r7
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	2e 97       	sbiw	r28, 0x0e	; 14
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	9c 01       	movw	r18, r24
 3d4:	86 2e       	mov	r8, r22
 3d6:	8e 01       	movw	r16, r28
 3d8:	0f 5f       	subi	r16, 0xFF	; 255
 3da:	1f 4f       	sbci	r17, 0xFF	; 255
 3dc:	5e 01       	movw	r10, r28
 3de:	8b e0       	ldi	r24, 0x0B	; 11
 3e0:	a8 0e       	add	r10, r24
 3e2:	b1 1c       	adc	r11, r1
 3e4:	f8 01       	movw	r30, r16
		LCD.Write('-');
		num = -num;
	}
	uint8_t pastzero = 0, cnum, cnt = 0;
	char buff[10];
	for(uint8_t i = 0; i < 10; i++) buff[i] = 255;
 3e6:	9f ef       	ldi	r25, 0xFF	; 255
 3e8:	91 93       	st	Z+, r25
 3ea:	ae 16       	cp	r10, r30
 3ec:	bf 06       	cpc	r11, r31
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <_Z8printNumIjEvT_b+0x48>
 3f0:	0f 2e       	mov	r0, r31
 3f2:	c1 2c       	mov	r12, r1
 3f4:	fa ec       	ldi	r31, 0xCA	; 202
 3f6:	df 2e       	mov	r13, r31
 3f8:	fa e9       	ldi	r31, 0x9A	; 154
 3fa:	ef 2e       	mov	r14, r31
 3fc:	fb e3       	ldi	r31, 0x3B	; 59
 3fe:	ff 2e       	mov	r15, r31
 400:	f0 2d       	mov	r31, r0
 402:	91 2c       	mov	r9, r1
		for(long i = 1000000000L; i > 0; i /=10){
			cnum = (num / i) % 10;
 404:	c9 01       	movw	r24, r18
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	8b 87       	std	Y+11, r24	; 0x0b
 40c:	9c 87       	std	Y+12, r25	; 0x0c
 40e:	ad 87       	std	Y+13, r26	; 0x0d
 410:	be 87       	std	Y+14, r27	; 0x0e
 412:	0f 2e       	mov	r0, r31
 414:	fa e0       	ldi	r31, 0x0A	; 10
 416:	4f 2e       	mov	r4, r31
 418:	51 2c       	mov	r5, r1
 41a:	61 2c       	mov	r6, r1
 41c:	71 2c       	mov	r7, r1
 41e:	f0 2d       	mov	r31, r0
			if(cnum)pastzero = 1;
 420:	33 24       	eor	r3, r3
 422:	33 94       	inc	r3
	}
	uint8_t pastzero = 0, cnum, cnt = 0;
	char buff[10];
	for(uint8_t i = 0; i < 10; i++) buff[i] = 255;
		for(long i = 1000000000L; i > 0; i /=10){
			cnum = (num / i) % 10;
 424:	6b 85       	ldd	r22, Y+11	; 0x0b
 426:	7c 85       	ldd	r23, Y+12	; 0x0c
 428:	8d 85       	ldd	r24, Y+13	; 0x0d
 42a:	9e 85       	ldd	r25, Y+14	; 0x0e
 42c:	a7 01       	movw	r20, r14
 42e:	96 01       	movw	r18, r12
 430:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
 434:	ca 01       	movw	r24, r20
 436:	b9 01       	movw	r22, r18
 438:	a3 01       	movw	r20, r6
 43a:	92 01       	movw	r18, r4
 43c:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
			if(cnum)pastzero = 1;
 440:	61 11       	cpse	r22, r1
 442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			if(pastzero) buff[cnt] = cnum + '0';
 444:	99 20       	and	r9, r9
 446:	29 f0       	breq	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 448:	01 c0       	rjmp	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	uint8_t pastzero = 0, cnum, cnt = 0;
	char buff[10];
	for(uint8_t i = 0; i < 10; i++) buff[i] = 255;
		for(long i = 1000000000L; i > 0; i /=10){
			cnum = (num / i) % 10;
			if(cnum)pastzero = 1;
 44a:	93 2c       	mov	r9, r3
			if(pastzero) buff[cnt] = cnum + '0';
 44c:	60 5d       	subi	r22, 0xD0	; 208
 44e:	d8 01       	movw	r26, r16
 450:	6c 93       	st	X, r22
		num = -num;
	}
	uint8_t pastzero = 0, cnum, cnt = 0;
	char buff[10];
	for(uint8_t i = 0; i < 10; i++) buff[i] = 255;
		for(long i = 1000000000L; i > 0; i /=10){
 452:	c7 01       	movw	r24, r14
 454:	b6 01       	movw	r22, r12
 456:	a3 01       	movw	r20, r6
 458:	92 01       	movw	r18, r4
 45a:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
 45e:	69 01       	movw	r12, r18
 460:	7a 01       	movw	r14, r20
 462:	0f 5f       	subi	r16, 0xFF	; 255
 464:	1f 4f       	sbci	r17, 0xFF	; 255
 466:	a0 16       	cp	r10, r16
 468:	b1 06       	cpc	r11, r17
 46a:	e1 f6       	brne	.-72     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			cnum = (num / i) % 10;
			if(cnum)pastzero = 1;
			if(pastzero) buff[cnt] = cnum + '0';
			cnt++;
		}
	if(!pastzero) buff[0] = '0';
 46c:	91 10       	cpse	r9, r1
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 470:	80 e3       	ldi	r24, 0x30	; 48
 472:	89 83       	std	Y+1, r24	; 0x01
	buff[10] = '\0';
 474:	1b 86       	std	Y+11, r1	; 0x0b
	if(rev) printString(buff, rev);
 476:	88 20       	and	r8, r8
 478:	31 f0       	breq	.+12     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	0e 94 4b 01 	call	0x296	; 0x296 <_Z11printStringPcb>
 484:	04 c0       	rjmp	.+8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	else printString(buff);
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z11printStringPc>
}
 48e:	2e 96       	adiw	r28, 0x0e	; 14
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	bf 90       	pop	r11
 4ac:	af 90       	pop	r10
 4ae:	9f 90       	pop	r9
 4b0:	8f 90       	pop	r8
 4b2:	7f 90       	pop	r7
 4b4:	6f 90       	pop	r6
 4b6:	5f 90       	pop	r5
 4b8:	4f 90       	pop	r4
 4ba:	3f 90       	pop	r3
 4bc:	08 95       	ret

000004be <_Z10printScorej>:
	for(uint8_t i = 0; i < strlen(chr); i++)
		if(chr[i] != 255)
			LCD.Write(chr[i]);
}

void printScore(uint16_t score){
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	ec 01       	movw	r28, r24
	LCD.RightToLeft();
 4c4:	81 e3       	ldi	r24, 0x31	; 49
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN6LCDDrv11RightToLeftEv>
	LCD.SetCursor(15, 1);
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	6f e0       	ldi	r22, 0x0F	; 15
 4d0:	81 e3       	ldi	r24, 0x31	; 49
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6LCDDrv9SetCursorEhh>
	printNum(score, reverse);
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	ce 01       	movw	r24, r28
 4dc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_Z8printNumIjEvT_b>
	printString("Score:", reverse);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	85 e1       	ldi	r24, 0x15	; 21
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 4b 01 	call	0x296	; 0x296 <_Z11printStringPcb>
	LCD.LeftToRight();
 4ea:	81 e3       	ldi	r24, 0x31	; 49
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6LCDDrv11LeftToRightEv>
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <main>:
void printString(char *chr, bool rev);
void printString(char *chr);
void printScore(uint16_t score);
uint16_t aRead();

int main(void){
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	6f 97       	sbiw	r28, 0x1f	; 31
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
	ADMUX |= (1 << REFS0);
 50c:	ec e7       	ldi	r30, 0x7C	; 124
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	80 64       	ori	r24, 0x40	; 64
 514:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 516:	ea e7       	ldi	r30, 0x7A	; 122
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	87 68       	ori	r24, 0x87	; 135
 51e:	80 83       	st	Z, r24
	
	OCR0A = 127;
 520:	8f e7       	ldi	r24, 0x7F	; 127
 522:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
 528:	93 e0       	ldi	r25, 0x03	; 3
 52a:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A);
 52c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();
 530:	78 94       	sei
	
	LCD.Init();
 532:	81 e3       	ldi	r24, 0x31	; 49
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN6LCDDrv4InitEv>
	uint8_t din[] = {0x0E, 0x17, 0x1E, 0x1F, 0x18, 0x1F, 0x1A, 0x12}, cact[] = {0x04, 0x05, 0x15, 0x15, 0x16, 0x0C, 0x04, 0x04};
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	e5 e0       	ldi	r30, 0x05	; 5
 53e:	f1 e0       	ldi	r31, 0x01	; 1
 540:	de 01       	movw	r26, r28
 542:	11 96       	adiw	r26, 0x01	; 1
 544:	01 90       	ld	r0, Z+
 546:	0d 92       	st	X+, r0
 548:	8a 95       	dec	r24
 54a:	e1 f7       	brne	.-8      	; 0x544 <main+0x4c>
 54c:	88 e0       	ldi	r24, 0x08	; 8
 54e:	ed e0       	ldi	r30, 0x0D	; 13
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	de 01       	movw	r26, r28
 554:	19 96       	adiw	r26, 0x09	; 9
 556:	01 90       	ld	r0, Z+
 558:	0d 92       	st	X+, r0
 55a:	8a 95       	dec	r24
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0x5e>
 55e:	9e 01       	movw	r18, r28
 560:	2f 5d       	subi	r18, 0xDF	; 223
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	fe 01       	movw	r30, r28
 566:	71 96       	adiw	r30, 0x11	; 17
	char downBuff[15];
	for(uint8_t i = 0; i < 16; i++) downBuff[i] = ' ';
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	81 93       	st	Z+, r24
 56c:	e2 17       	cp	r30, r18
 56e:	f3 07       	cpc	r31, r19
 570:	e1 f7       	brne	.-8      	; 0x56a <main+0x72>
	
	LCD.AddCharacter(0x01, din);
 572:	ae 01       	movw	r20, r28
 574:	4f 5f       	subi	r20, 0xFF	; 255
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	81 e3       	ldi	r24, 0x31	; 49
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN6LCDDrv12AddCharacterEhPh>
	LCD.AddCharacter(0x02, cact);
 582:	ae 01       	movw	r20, r28
 584:	47 5f       	subi	r20, 0xF7	; 247
 586:	5f 4f       	sbci	r21, 0xFF	; 255
 588:	62 e0       	ldi	r22, 0x02	; 2
 58a:	81 e3       	ldi	r24, 0x31	; 49
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN6LCDDrv12AddCharacterEhPh>
	
	const uint8_t dino = 0x01, cactus = 0x02;
	uint8_t distance = 6, speed = 200, dontprint = 0;
	uint16_t aVal = 0, score = 1, bestscore = 0;
 592:	61 2c       	mov	r6, r1
 594:	71 2c       	mov	r7, r1
 596:	ee 24       	eor	r14, r14
 598:	e3 94       	inc	r14
 59a:	f1 2c       	mov	r15, r1
	
	LCD.AddCharacter(0x01, din);
	LCD.AddCharacter(0x02, cact);
	
	const uint8_t dino = 0x01, cactus = 0x02;
	uint8_t distance = 6, speed = 200, dontprint = 0;
 59c:	c1 2c       	mov	r12, r1
 59e:	0f 2e       	mov	r0, r31
 5a0:	f8 ec       	ldi	r31, 0xC8	; 200
 5a2:	5f 2e       	mov	r5, r31
 5a4:	f0 2d       	mov	r31, r0
 5a6:	0f 2e       	mov	r0, r31
 5a8:	f6 e0       	ldi	r31, 0x06	; 6
 5aa:	4f 2e       	mov	r4, r31
 5ac:	f0 2d       	mov	r31, r0
	uint16_t aVal = 0, score = 1, bestscore = 0;
	
	while (1) {
		
		ADMUX |= (1 << MUX2) | (1 << MUX1);
 5ae:	0f 2e       	mov	r0, r31
 5b0:	fc e7       	ldi	r31, 0x7C	; 124
 5b2:	af 2e       	mov	r10, r31
 5b4:	b1 2c       	mov	r11, r1
 5b6:	f0 2d       	mov	r31, r0
 5b8:	8e 01       	movw	r16, r28
 5ba:	00 5e       	subi	r16, 0xE0	; 224
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
		for(uint8_t  i= 0; i < 15; i++) downBuff[i] = downBuff[i + 1];
		if((rand() % 100) > (rand() % 100)  && !dontprint){
			downBuff[15] = cactus;
			dontprint++;
		}
		else downBuff[15] = ' ';
 5be:	68 94       	set
 5c0:	dd 24       	eor	r13, r13
 5c2:	d5 f8       	bld	r13, 5
		ADMUX &= ~(1 << MUX2) & ~(1 << MUX1);
		
		if(aRead() > 900) longhold = false;
		for(uint8_t  i= 0; i < 15; i++) downBuff[i] = downBuff[i + 1];
		if((rand() % 100) > (rand() % 100)  && !dontprint){
			downBuff[15] = cactus;
 5c4:	68 94       	set
 5c6:	33 24       	eor	r3, r3
 5c8:	31 f8       	bld	r3, 1
			}
		}
		
		if(score % 5 == 0) speed -=2;
		if(speed < 85) speed = 85;
		if(score % 175 == 0) distance--;
 5ca:	0f 2e       	mov	r0, r31
 5cc:	ff ea       	ldi	r31, 0xAF	; 175
 5ce:	2f 2e       	mov	r2, r31
 5d0:	f0 2d       	mov	r31, r0
	uint8_t distance = 6, speed = 200, dontprint = 0;
	uint16_t aVal = 0, score = 1, bestscore = 0;
	
	while (1) {
		
		ADMUX |= (1 << MUX2) | (1 << MUX1);
 5d2:	f5 01       	movw	r30, r10
 5d4:	80 81       	ld	r24, Z
 5d6:	86 60       	ori	r24, 0x06	; 6
 5d8:	80 83       	st	Z, r24
		srand(aRead());
 5da:	0e 94 8a 01 	call	0x314	; 0x314 <_Z5aReadv>
 5de:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <srand>
		ADMUX &= ~(1 << MUX2) & ~(1 << MUX1);
 5e2:	f5 01       	movw	r30, r10
 5e4:	80 81       	ld	r24, Z
 5e6:	89 7f       	andi	r24, 0xF9	; 249
 5e8:	80 83       	st	Z, r24
		
		if(aRead() > 900) longhold = false;
 5ea:	0e 94 8a 01 	call	0x314	; 0x314 <_Z5aReadv>
 5ee:	85 38       	cpi	r24, 0x85	; 133
 5f0:	93 40       	sbci	r25, 0x03	; 3
 5f2:	08 f4       	brcc	.+2      	; 0x5f6 <main+0xfe>
 5f4:	ea c0       	rjmp	.+468    	; 0x7ca <main+0x2d2>
 5f6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <longhold>
 5fa:	e7 c0       	rjmp	.+462    	; 0x7ca <main+0x2d2>
		for(uint8_t  i= 0; i < 15; i++) downBuff[i] = downBuff[i + 1];
 5fc:	81 81       	ldd	r24, Z+1	; 0x01
 5fe:	81 93       	st	Z+, r24
 600:	0e 17       	cp	r16, r30
 602:	1f 07       	cpc	r17, r31
 604:	d9 f7       	brne	.-10     	; 0x5fc <main+0x104>
		if((rand() % 100) > (rand() % 100)  && !dontprint){
 606:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <rand>
 60a:	4c 01       	movw	r8, r24
 60c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <rand>
 610:	fc 01       	movw	r30, r24
 612:	c4 01       	movw	r24, r8
 614:	64 e6       	ldi	r22, 0x64	; 100
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
 61c:	9c 01       	movw	r18, r24
 61e:	cf 01       	movw	r24, r30
 620:	64 e6       	ldi	r22, 0x64	; 100
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
 628:	82 17       	cp	r24, r18
 62a:	93 07       	cpc	r25, r19
 62c:	0c f0       	brlt	.+2      	; 0x630 <main+0x138>
 62e:	d0 c0       	rjmp	.+416    	; 0x7d0 <main+0x2d8>
 630:	cc 20       	and	r12, r12
 632:	09 f4       	brne	.+2      	; 0x636 <main+0x13e>
 634:	cf c0       	rjmp	.+414    	; 0x7d4 <main+0x2dc>
 636:	cc c0       	rjmp	.+408    	; 0x7d0 <main+0x2d8>
			downBuff[15] = cactus;
			dontprint++;
		}
		else downBuff[15] = ' ';
		char lastchar = downBuff[3];
 638:	9c 88       	ldd	r9, Y+20	; 0x14
		if(!goUp){
 63a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <goUp>
 63e:	81 11       	cpse	r24, r1
 640:	11 c0       	rjmp	.+34     	; 0x664 <main+0x16c>
				downBuff[3] = dino;
 642:	88 24       	eor	r8, r8
 644:	83 94       	inc	r8
 646:	8c 8a       	std	Y+20, r8	; 0x14
				LCD.SetCursor(0, 2);
 648:	43 2d       	mov	r20, r3
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	81 e3       	ldi	r24, 0x31	; 49
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6LCDDrv9SetCursorEhh>
				printString(downBuff);
 654:	ce 01       	movw	r24, r28
 656:	41 96       	adiw	r24, 0x11	; 17
 658:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z11printStringPc>
				downBuff[3] = lastchar;
 65c:	9c 8a       	std	Y+20, r9	; 0x14
				canUp = true;
 65e:	80 92 04 01 	sts	0x0104, r8	; 0x800104 <canUp>
 662:	17 c0       	rjmp	.+46     	; 0x692 <main+0x19a>
			} else {
				LCD.SetCursor(3, 1);
 664:	41 e0       	ldi	r20, 0x01	; 1
 666:	63 e0       	ldi	r22, 0x03	; 3
 668:	81 e3       	ldi	r24, 0x31	; 49
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6LCDDrv9SetCursorEhh>
				LCD.Write(dino);
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	81 e3       	ldi	r24, 0x31	; 49
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN6LCDDrv5WriteEh>
				LCD.SetCursor(0, 2);
 67a:	43 2d       	mov	r20, r3
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	81 e3       	ldi	r24, 0x31	; 49
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6LCDDrv9SetCursorEhh>
				printString(downBuff);
 686:	ce 01       	movw	r24, r28
 688:	41 96       	adiw	r24, 0x11	; 17
 68a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z11printStringPc>
				canUp = false;
 68e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <canUp>
		}

		if(dontprint) dontprint++;
 692:	cc 20       	and	r12, r12
 694:	21 f0       	breq	.+8      	; 0x69e <main+0x1a6>
 696:	c3 94       	inc	r12
		if(dontprint > distance) dontprint = 0;
 698:	4c 14       	cp	r4, r12
 69a:	08 f4       	brcc	.+2      	; 0x69e <main+0x1a6>
 69c:	c1 2c       	mov	r12, r1
		
		if(goUp) goUp++;
 69e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <goUp>
 6a2:	88 23       	and	r24, r24
 6a4:	29 f0       	breq	.+10     	; 0x6b0 <main+0x1b8>
 6a6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <goUp>
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <goUp>
		if(goUp > 4){
 6b0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <goUp>
 6b4:	85 30       	cpi	r24, 0x05	; 5
 6b6:	68 f0       	brcs	.+26     	; 0x6d2 <main+0x1da>
			LCD.SetCursor(3, 1);
 6b8:	41 e0       	ldi	r20, 0x01	; 1
 6ba:	63 e0       	ldi	r22, 0x03	; 3
 6bc:	81 e3       	ldi	r24, 0x31	; 49
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6LCDDrv9SetCursorEhh>
			LCD.Write(' ');
 6c4:	6d 2d       	mov	r22, r13
 6c6:	81 e3       	ldi	r24, 0x31	; 49
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN6LCDDrv5WriteEh>
			goUp = 0;
 6ce:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <goUp>
		}

		score++;
 6d2:	2f ef       	ldi	r18, 0xFF	; 255
 6d4:	e2 1a       	sub	r14, r18
 6d6:	f2 0a       	sbc	r15, r18
 6d8:	6e 14       	cp	r6, r14
 6da:	7f 04       	cpc	r7, r15
 6dc:	08 f4       	brcc	.+2      	; 0x6e0 <main+0x1e8>
 6de:	37 01       	movw	r6, r14
		if(score > bestscore) bestscore = score;
		printScore(score);
 6e0:	c7 01       	movw	r24, r14
 6e2:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z10printScorej>
		
		if(lastchar == cactus && !goUp){
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	98 12       	cpse	r9, r24
 6ea:	2a c0       	rjmp	.+84     	; 0x740 <main+0x248>
 6ec:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <goUp>
 6f0:	88 23       	and	r24, r24
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <main+0x1fe>
 6f4:	73 c0       	rjmp	.+230    	; 0x7dc <main+0x2e4>
 6f6:	24 c0       	rjmp	.+72     	; 0x740 <main+0x248>
			printNum(score, normal);
			LCD.SetCursor(0, 2);
			printString("Best: ");
			printNum(bestscore, normal);
			while (1){
				aVal = aRead();
 6f8:	0e 94 8a 01 	call	0x314	; 0x314 <_Z5aReadv>
				if(aVal > 635 && aVal < 645){
 6fc:	8c 57       	subi	r24, 0x7C	; 124
 6fe:	92 40       	sbci	r25, 0x02	; 2
 700:	09 97       	sbiw	r24, 0x09	; 9
 702:	d0 f7       	brcc	.-12     	; 0x6f8 <main+0x200>
					LCD.Clear();
 704:	81 e3       	ldi	r24, 0x31	; 49
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN6LCDDrv5ClearEv>
 70c:	fe 01       	movw	r30, r28
 70e:	71 96       	adiw	r30, 0x11	; 17
					for(uint8_t i = 0; i < 15; i++) downBuff[i] = ' ';
 710:	d1 92       	st	Z+, r13
 712:	0e 17       	cp	r16, r30
 714:	1f 07       	cpc	r17, r31
 716:	e1 f7       	brne	.-8      	; 0x710 <main+0x218>
					dontprint = 0;
					goUp = 0;
 718:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <goUp>
					score = 1;
					speed = 200;
					longhold = 0;
 71c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <longhold>
					distance = 6;
					canUp = 1;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <canUp>
				if(aVal > 635 && aVal < 645){
					LCD.Clear();
					for(uint8_t i = 0; i < 15; i++) downBuff[i] = ' ';
					dontprint = 0;
					goUp = 0;
					score = 1;
 726:	ee 24       	eor	r14, r14
 728:	e3 94       	inc	r14
 72a:	f1 2c       	mov	r15, r1
			while (1){
				aVal = aRead();
				if(aVal > 635 && aVal < 645){
					LCD.Clear();
					for(uint8_t i = 0; i < 15; i++) downBuff[i] = ' ';
					dontprint = 0;
 72c:	c1 2c       	mov	r12, r1
					goUp = 0;
					score = 1;
					speed = 200;
					longhold = 0;
					distance = 6;
 72e:	0f 2e       	mov	r0, r31
 730:	f6 e0       	ldi	r31, 0x06	; 6
 732:	4f 2e       	mov	r4, r31
 734:	f0 2d       	mov	r31, r0
					LCD.Clear();
					for(uint8_t i = 0; i < 15; i++) downBuff[i] = ' ';
					dontprint = 0;
					goUp = 0;
					score = 1;
					speed = 200;
 736:	0f 2e       	mov	r0, r31
 738:	f8 ec       	ldi	r31, 0xC8	; 200
 73a:	5f 2e       	mov	r5, r31
 73c:	f0 2d       	mov	r31, r0
 73e:	1c c0       	rjmp	.+56     	; 0x778 <main+0x280>
					break;
				}
			}
		}
		
		if(score % 5 == 0) speed -=2;
 740:	97 01       	movw	r18, r14
 742:	ad ec       	ldi	r26, 0xCD	; 205
 744:	bc ec       	ldi	r27, 0xCC	; 204
 746:	0e 94 42 04 	call	0x884	; 0x884 <__umulhisi3>
 74a:	96 95       	lsr	r25
 74c:	87 95       	ror	r24
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	9c 01       	movw	r18, r24
 754:	22 0f       	add	r18, r18
 756:	33 1f       	adc	r19, r19
 758:	22 0f       	add	r18, r18
 75a:	33 1f       	adc	r19, r19
 75c:	82 0f       	add	r24, r18
 75e:	93 1f       	adc	r25, r19
 760:	e8 16       	cp	r14, r24
 762:	f9 06       	cpc	r15, r25
 764:	11 f4       	brne	.+4      	; 0x76a <main+0x272>
 766:	5a 94       	dec	r5
 768:	5a 94       	dec	r5
		if(speed < 85) speed = 85;
 76a:	e4 e5       	ldi	r30, 0x54	; 84
 76c:	e5 15       	cp	r30, r5
 76e:	20 f0       	brcs	.+8      	; 0x778 <main+0x280>
 770:	0f 2e       	mov	r0, r31
 772:	f5 e5       	ldi	r31, 0x55	; 85
 774:	5f 2e       	mov	r5, r31
 776:	f0 2d       	mov	r31, r0
		if(score % 175 == 0) distance--;
 778:	97 01       	movw	r18, r14
 77a:	af e3       	ldi	r26, 0x3F	; 63
 77c:	bb eb       	ldi	r27, 0xBB	; 187
 77e:	0e 94 42 04 	call	0x884	; 0x884 <__umulhisi3>
 782:	88 0f       	add	r24, r24
 784:	89 2f       	mov	r24, r25
 786:	88 1f       	adc	r24, r24
 788:	99 0b       	sbc	r25, r25
 78a:	91 95       	neg	r25
 78c:	28 9e       	mul	r2, r24
 78e:	90 01       	movw	r18, r0
 790:	29 9e       	mul	r2, r25
 792:	30 0d       	add	r19, r0
 794:	11 24       	eor	r1, r1
 796:	e2 16       	cp	r14, r18
 798:	f3 06       	cpc	r15, r19
 79a:	09 f4       	brne	.+2      	; 0x79e <main+0x2a6>
 79c:	4a 94       	dec	r4
		if(distance < 5) distance = 5;
 79e:	f4 e0       	ldi	r31, 0x04	; 4
 7a0:	f4 15       	cp	r31, r4
 7a2:	20 f0       	brcs	.+8      	; 0x7ac <main+0x2b4>
 7a4:	0f 2e       	mov	r0, r31
 7a6:	f5 e0       	ldi	r31, 0x05	; 5
 7a8:	4f 2e       	mov	r4, r31
 7aa:	f0 2d       	mov	r31, r0
		for(uint8_t i = 0; i < speed; i++) _delay_ms(1);
 7ac:	55 20       	and	r5, r5
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <main+0x2ba>
 7b0:	10 cf       	rjmp	.-480    	; 0x5d2 <main+0xda>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b4:	ef e9       	ldi	r30, 0x9F	; 159
 7b6:	ff e0       	ldi	r31, 0x0F	; 15
 7b8:	31 97       	sbiw	r30, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <main+0x2c0>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x2c6>
 7be:	00 00       	nop
 7c0:	8f 5f       	subi	r24, 0xFF	; 255
 7c2:	58 16       	cp	r5, r24
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <main+0x2d0>
 7c6:	05 cf       	rjmp	.-502    	; 0x5d2 <main+0xda>
 7c8:	f5 cf       	rjmp	.-22     	; 0x7b4 <main+0x2bc>
	
	LCD.AddCharacter(0x01, din);
	LCD.AddCharacter(0x02, cact);
	
	const uint8_t dino = 0x01, cactus = 0x02;
	uint8_t distance = 6, speed = 200, dontprint = 0;
 7ca:	fe 01       	movw	r30, r28
 7cc:	71 96       	adiw	r30, 0x11	; 17
 7ce:	16 cf       	rjmp	.-468    	; 0x5fc <main+0x104>
		for(uint8_t  i= 0; i < 15; i++) downBuff[i] = downBuff[i + 1];
		if((rand() % 100) > (rand() % 100)  && !dontprint){
			downBuff[15] = cactus;
			dontprint++;
		}
		else downBuff[15] = ' ';
 7d0:	d8 a2       	std	Y+32, r13	; 0x20
 7d2:	32 cf       	rjmp	.-412    	; 0x638 <main+0x140>
		ADMUX &= ~(1 << MUX2) & ~(1 << MUX1);
		
		if(aRead() > 900) longhold = false;
		for(uint8_t  i= 0; i < 15; i++) downBuff[i] = downBuff[i + 1];
		if((rand() % 100) > (rand() % 100)  && !dontprint){
			downBuff[15] = cactus;
 7d4:	38 a2       	std	Y+32, r3	; 0x20
			dontprint++;
 7d6:	cc 24       	eor	r12, r12
 7d8:	c3 94       	inc	r12
 7da:	2e cf       	rjmp	.-420    	; 0x638 <main+0x140>
		score++;
		if(score > bestscore) bestscore = score;
		printScore(score);
		
		if(lastchar == cactus && !goUp){
			LCD.Clear();
 7dc:	81 e3       	ldi	r24, 0x31	; 49
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN6LCDDrv5ClearEv>
			LCD.SetCursor(0, 1);
 7e4:	41 e0       	ldi	r20, 0x01	; 1
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	81 e3       	ldi	r24, 0x31	; 49
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6LCDDrv9SetCursorEhh>
			printString("Score: ");
 7f0:	8c e1       	ldi	r24, 0x1C	; 28
 7f2:	91 e0       	ldi	r25, 0x01	; 1
 7f4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z11printStringPc>
			printNum(score, normal);
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	c7 01       	movw	r24, r14
 7fc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_Z8printNumIjEvT_b>
			LCD.SetCursor(0, 2);
 800:	43 2d       	mov	r20, r3
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	81 e3       	ldi	r24, 0x31	; 49
 806:	91 e0       	ldi	r25, 0x01	; 1
 808:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6LCDDrv9SetCursorEhh>
			printString("Best: ");
 80c:	84 e2       	ldi	r24, 0x24	; 36
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z11printStringPc>
			printNum(bestscore, normal);
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	c3 01       	movw	r24, r6
 818:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_Z8printNumIjEvT_b>
 81c:	6d cf       	rjmp	.-294    	; 0x6f8 <main+0x200>

0000081e <__divmodhi4>:
 81e:	97 fb       	bst	r25, 7
 820:	07 2e       	mov	r0, r23
 822:	16 f4       	brtc	.+4      	; 0x828 <__divmodhi4+0xa>
 824:	00 94       	com	r0
 826:	07 d0       	rcall	.+14     	; 0x836 <__divmodhi4_neg1>
 828:	77 fd       	sbrc	r23, 7
 82a:	09 d0       	rcall	.+18     	; 0x83e <__divmodhi4_neg2>
 82c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__udivmodhi4>
 830:	07 fc       	sbrc	r0, 7
 832:	05 d0       	rcall	.+10     	; 0x83e <__divmodhi4_neg2>
 834:	3e f4       	brtc	.+14     	; 0x844 <__divmodhi4_exit>

00000836 <__divmodhi4_neg1>:
 836:	90 95       	com	r25
 838:	81 95       	neg	r24
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__divmodhi4_neg2>:
 83e:	70 95       	com	r23
 840:	61 95       	neg	r22
 842:	7f 4f       	sbci	r23, 0xFF	; 255

00000844 <__divmodhi4_exit>:
 844:	08 95       	ret

00000846 <__divmodsi4>:
 846:	05 2e       	mov	r0, r21
 848:	97 fb       	bst	r25, 7
 84a:	1e f4       	brtc	.+6      	; 0x852 <__divmodsi4+0xc>
 84c:	00 94       	com	r0
 84e:	0e 94 3a 04 	call	0x874	; 0x874 <__negsi2>
 852:	57 fd       	sbrc	r21, 7
 854:	07 d0       	rcall	.+14     	; 0x864 <__divmodsi4_neg2>
 856:	0e 94 65 04 	call	0x8ca	; 0x8ca <__udivmodsi4>
 85a:	07 fc       	sbrc	r0, 7
 85c:	03 d0       	rcall	.+6      	; 0x864 <__divmodsi4_neg2>
 85e:	4e f4       	brtc	.+18     	; 0x872 <__divmodsi4_exit>
 860:	0c 94 3a 04 	jmp	0x874	; 0x874 <__negsi2>

00000864 <__divmodsi4_neg2>:
 864:	50 95       	com	r21
 866:	40 95       	com	r20
 868:	30 95       	com	r19
 86a:	21 95       	neg	r18
 86c:	3f 4f       	sbci	r19, 0xFF	; 255
 86e:	4f 4f       	sbci	r20, 0xFF	; 255
 870:	5f 4f       	sbci	r21, 0xFF	; 255

00000872 <__divmodsi4_exit>:
 872:	08 95       	ret

00000874 <__negsi2>:
 874:	90 95       	com	r25
 876:	80 95       	com	r24
 878:	70 95       	com	r23
 87a:	61 95       	neg	r22
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	08 95       	ret

00000884 <__umulhisi3>:
 884:	a2 9f       	mul	r26, r18
 886:	b0 01       	movw	r22, r0
 888:	b3 9f       	mul	r27, r19
 88a:	c0 01       	movw	r24, r0
 88c:	a3 9f       	mul	r26, r19
 88e:	70 0d       	add	r23, r0
 890:	81 1d       	adc	r24, r1
 892:	11 24       	eor	r1, r1
 894:	91 1d       	adc	r25, r1
 896:	b2 9f       	mul	r27, r18
 898:	70 0d       	add	r23, r0
 89a:	81 1d       	adc	r24, r1
 89c:	11 24       	eor	r1, r1
 89e:	91 1d       	adc	r25, r1
 8a0:	08 95       	ret

000008a2 <__udivmodhi4>:
 8a2:	aa 1b       	sub	r26, r26
 8a4:	bb 1b       	sub	r27, r27
 8a6:	51 e1       	ldi	r21, 0x11	; 17
 8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <__udivmodhi4_ep>

000008aa <__udivmodhi4_loop>:
 8aa:	aa 1f       	adc	r26, r26
 8ac:	bb 1f       	adc	r27, r27
 8ae:	a6 17       	cp	r26, r22
 8b0:	b7 07       	cpc	r27, r23
 8b2:	10 f0       	brcs	.+4      	; 0x8b8 <__udivmodhi4_ep>
 8b4:	a6 1b       	sub	r26, r22
 8b6:	b7 0b       	sbc	r27, r23

000008b8 <__udivmodhi4_ep>:
 8b8:	88 1f       	adc	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	5a 95       	dec	r21
 8be:	a9 f7       	brne	.-22     	; 0x8aa <__udivmodhi4_loop>
 8c0:	80 95       	com	r24
 8c2:	90 95       	com	r25
 8c4:	bc 01       	movw	r22, r24
 8c6:	cd 01       	movw	r24, r26
 8c8:	08 95       	ret

000008ca <__udivmodsi4>:
 8ca:	a1 e2       	ldi	r26, 0x21	; 33
 8cc:	1a 2e       	mov	r1, r26
 8ce:	aa 1b       	sub	r26, r26
 8d0:	bb 1b       	sub	r27, r27
 8d2:	fd 01       	movw	r30, r26
 8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <__udivmodsi4_ep>

000008d6 <__udivmodsi4_loop>:
 8d6:	aa 1f       	adc	r26, r26
 8d8:	bb 1f       	adc	r27, r27
 8da:	ee 1f       	adc	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	a2 17       	cp	r26, r18
 8e0:	b3 07       	cpc	r27, r19
 8e2:	e4 07       	cpc	r30, r20
 8e4:	f5 07       	cpc	r31, r21
 8e6:	20 f0       	brcs	.+8      	; 0x8f0 <__udivmodsi4_ep>
 8e8:	a2 1b       	sub	r26, r18
 8ea:	b3 0b       	sbc	r27, r19
 8ec:	e4 0b       	sbc	r30, r20
 8ee:	f5 0b       	sbc	r31, r21

000008f0 <__udivmodsi4_ep>:
 8f0:	66 1f       	adc	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	1a 94       	dec	r1
 8fa:	69 f7       	brne	.-38     	; 0x8d6 <__udivmodsi4_loop>
 8fc:	60 95       	com	r22
 8fe:	70 95       	com	r23
 900:	80 95       	com	r24
 902:	90 95       	com	r25
 904:	9b 01       	movw	r18, r22
 906:	ac 01       	movw	r20, r24
 908:	bd 01       	movw	r22, r26
 90a:	cf 01       	movw	r24, r30
 90c:	08 95       	ret

0000090e <do_rand>:
 90e:	8f 92       	push	r8
 910:	9f 92       	push	r9
 912:	af 92       	push	r10
 914:	bf 92       	push	r11
 916:	cf 92       	push	r12
 918:	df 92       	push	r13
 91a:	ef 92       	push	r14
 91c:	ff 92       	push	r15
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	ec 01       	movw	r28, r24
 924:	68 81       	ld	r22, Y
 926:	79 81       	ldd	r23, Y+1	; 0x01
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	61 15       	cp	r22, r1
 92e:	71 05       	cpc	r23, r1
 930:	81 05       	cpc	r24, r1
 932:	91 05       	cpc	r25, r1
 934:	21 f4       	brne	.+8      	; 0x93e <do_rand+0x30>
 936:	64 e2       	ldi	r22, 0x24	; 36
 938:	79 ed       	ldi	r23, 0xD9	; 217
 93a:	8b e5       	ldi	r24, 0x5B	; 91
 93c:	97 e0       	ldi	r25, 0x07	; 7
 93e:	2d e1       	ldi	r18, 0x1D	; 29
 940:	33 ef       	ldi	r19, 0xF3	; 243
 942:	41 e0       	ldi	r20, 0x01	; 1
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
 94a:	49 01       	movw	r8, r18
 94c:	5a 01       	movw	r10, r20
 94e:	9b 01       	movw	r18, r22
 950:	ac 01       	movw	r20, r24
 952:	a7 ea       	ldi	r26, 0xA7	; 167
 954:	b1 e4       	ldi	r27, 0x41	; 65
 956:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__muluhisi3>
 95a:	6b 01       	movw	r12, r22
 95c:	7c 01       	movw	r14, r24
 95e:	ac ee       	ldi	r26, 0xEC	; 236
 960:	b4 ef       	ldi	r27, 0xF4	; 244
 962:	a5 01       	movw	r20, r10
 964:	94 01       	movw	r18, r8
 966:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__mulohisi3>
 96a:	dc 01       	movw	r26, r24
 96c:	cb 01       	movw	r24, r22
 96e:	8c 0d       	add	r24, r12
 970:	9d 1d       	adc	r25, r13
 972:	ae 1d       	adc	r26, r14
 974:	bf 1d       	adc	r27, r15
 976:	b7 ff       	sbrs	r27, 7
 978:	03 c0       	rjmp	.+6      	; 0x980 <do_rand+0x72>
 97a:	01 97       	sbiw	r24, 0x01	; 1
 97c:	a1 09       	sbc	r26, r1
 97e:	b0 48       	sbci	r27, 0x80	; 128
 980:	88 83       	st	Y, r24
 982:	99 83       	std	Y+1, r25	; 0x01
 984:	aa 83       	std	Y+2, r26	; 0x02
 986:	bb 83       	std	Y+3, r27	; 0x03
 988:	9f 77       	andi	r25, 0x7F	; 127
 98a:	df 91       	pop	r29
 98c:	cf 91       	pop	r28
 98e:	ff 90       	pop	r15
 990:	ef 90       	pop	r14
 992:	df 90       	pop	r13
 994:	cf 90       	pop	r12
 996:	bf 90       	pop	r11
 998:	af 90       	pop	r10
 99a:	9f 90       	pop	r9
 99c:	8f 90       	pop	r8
 99e:	08 95       	ret

000009a0 <rand_r>:
 9a0:	0e 94 87 04 	call	0x90e	; 0x90e <do_rand>
 9a4:	08 95       	ret

000009a6 <rand>:
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	0e 94 87 04 	call	0x90e	; 0x90e <do_rand>
 9ae:	08 95       	ret

000009b0 <srand>:
 9b0:	a0 e0       	ldi	r26, 0x00	; 0
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9bc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 9c0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 9c4:	08 95       	ret

000009c6 <__muluhisi3>:
 9c6:	0e 94 42 04 	call	0x884	; 0x884 <__umulhisi3>
 9ca:	a5 9f       	mul	r26, r21
 9cc:	90 0d       	add	r25, r0
 9ce:	b4 9f       	mul	r27, r20
 9d0:	90 0d       	add	r25, r0
 9d2:	a4 9f       	mul	r26, r20
 9d4:	80 0d       	add	r24, r0
 9d6:	91 1d       	adc	r25, r1
 9d8:	11 24       	eor	r1, r1
 9da:	08 95       	ret

000009dc <__mulshisi3>:
 9dc:	b7 ff       	sbrs	r27, 7
 9de:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__muluhisi3>

000009e2 <__mulohisi3>:
 9e2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__muluhisi3>
 9e6:	82 1b       	sub	r24, r18
 9e8:	93 0b       	sbc	r25, r19
 9ea:	08 95       	ret

000009ec <_exit>:
 9ec:	f8 94       	cli

000009ee <__stop_program>:
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <__stop_program>
